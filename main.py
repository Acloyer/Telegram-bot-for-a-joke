import asyncio
import datetime
import random
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

BOT_TOKEN = "7619709838:AAGZrwZW-RID61ndOS8hcy5gkgFIalJVBg8"
CHAT_ID = -4907114041
ADMIN_ID = 1822862999

TRIP_TIME = datetime.datetime(2025, 6, 8, 8, 40)

PHRASES = [
    "–ß–µ–º–æ–¥–∞–Ω—ã —Å–æ–±—Ä–∞–Ω—ã? –û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {minutes} –º–∏–Ω—É—Ç!",
    "–°–∫–æ—Ä–æ –≤—ã–ª–µ—Ç –≤ –°—É–º–≥–∞–∏—Ç! {minutes} –º–∏–Ω—É—Ç –¥–æ —Å—Ç–∞—Ä—Ç–∞. üöå",
    "–¢–∏–∫-—Ç–∞–∫... –æ—Å—Ç–∞–ª–æ—Å—å {minutes} –º–∏–Ω—É—Ç! –í—Ä–µ–º—è –ª–µ—Ç–∏—Ç!",
    "–ü—Ä–æ–≤–µ—Ä—å –Ω–æ—Å–∫–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã: {minutes} –º–∏–Ω—É—Ç –¥–æ –°—É–º–≥–∞–∏—Ç–∞!",
    "–¢—ã —É–∂–µ –ø–∞—Ö–Ω–µ—à—å –°—É–º–≥–∞–∏—Ç–æ–º... {minutes} –º–∏–Ω—É—Ç –æ—Å—Ç–∞–ª–æ—Å—å!",
    "–ï—Å–ª–∏ —Ç—ã –Ω–µ –≥–æ—Ç–æ–≤ - —ç—Ç–æ —Ç–≤–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã. {minutes} –º–∏–Ω—É—Ç!",
    "–í—Å–µ —É–∂–µ —Å–±—Ä–∏–ª–∏ —Å–µ–±–µ –ø–∏—Å—å–∫–∏? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {minutes} –¥–æ —Ç–æ–≥–æ –∫–∞–∫ –≤—Å–µ –≤—Å—Ç—Ä–µ—Ç—è—Ç—Å—è!",
    "–ö–∞–∫ –¥—É–º–∞–µ—Ç–µ –¢–∏–º–∞ –≤—ã—Ä–≤–µ—Ç? –£–∑–Ω–∞–µ–º —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç :))",
    "–ö–∞–∫ –¥—É–º–∞–µ—Ç–µ –ó–∞—Ä–∏—Ñ–∞ –≤—ã—Ä–≤–µ—Ç? –£–∑–Ω–∞–µ–º —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç ü§Æü§¢",
    "–ö–∞–∫ –¥—É–º–∞–µ—Ç–µ –†–∞—Ñ–∏–≥ –≤—ã—Ä–≤–µ—Ç? –£–∑–Ω–∞–µ–º —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç üò§üò§",
    "–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ —ç—Ç–æ—Ç –≤–∞–π–±?... –≠—Ç–æ –∂–µ —Ç–æ—Ç —Å–∞–º—ã–π –≤–∞–π–± –∫–æ–≥–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å {minutes} –¥–æ –°—É–º–≥–∞–∏—Ç–∞!",
    "–ö–∞–∂–¥–∞—è –º–∏–Ω—É—Ç–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ –≤–µ–ª–∏–∫–æ–º—É –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—é. –û—Å—Ç–∞–ª–æ—Å—å {minutes}!",
]

is_muted = False
next_send_time: datetime.datetime = None
counters = {
    "messages_sent": 0,
    "broadcast_count": 0,
    "panic_count": 0,
    "time_requests": 0,
}

def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID

def get_delta() -> datetime.timedelta:
    now = datetime.datetime.now()
    return max(TRIP_TIME - now, datetime.timedelta(0))

def get_minutes_left() -> int:
    return int(get_delta().total_seconds() // 60)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = "–ü—Ä–∏–≤–µ—Ç! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    text += "/time ‚Äî —É–∑–Ω–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –ø–æ–µ–∑–¥–∫–∏\n"
    text += "/next ‚Äî –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ\n"
    text += "/mute ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è\n"
    text += "/unmute ‚Äî –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è\n"
    if is_admin(user.id):
        text += "\n–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n"
        text += "/broadcast <chat_id> <msg> ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É –ª—é–±–æ–π —Ç–µ–∫—Å—Ç\n"
        text += "/panic <chat_id> ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–æ—Ñ–ª–æ—Ñ—Ä–∞–∑—É —Å–µ–π—á–∞—Å\n"
        text += "/piska ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—Ä—É—Ç–∞–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ\n"
        text += "/stats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
    await update.message.reply_text(text)

async def time_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    counters["time_requests"] += 1
    minutes = get_minutes_left()
    kb = [
        [InlineKeyboardButton("–ú–∏–Ω—É—Ç—ã", callback_data="fmt_minutes"),
         InlineKeyboardButton("–ß–∞—Å—ã", callback_data="fmt_hours")],
        [InlineKeyboardButton("–°–µ–∫—É–Ω–¥—ã", callback_data="fmt_seconds"),
         InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data="fmt_refresh")],
        [InlineKeyboardButton("Next", callback_data="next")]
    ]
    markup = InlineKeyboardMarkup(kb)
    await update.message.reply_text(f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {minutes} –º–∏–Ω—É—Ç –¥–æ –ø–æ–µ–∑–¥–∫–∏!", reply_markup=markup)

async def next_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if next_send_time:
        delta = next_send_time - datetime.datetime.now()
        mins = int(delta.total_seconds() // 60)
        secs = int(delta.total_seconds() % 60)
        await update.message.reply_text(f"üì° –°–ª–µ–¥—É—é—â–µ–µ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {mins} –º–∏–Ω {secs} —Å–µ–∫")
    else:
        await update.message.reply_text("üïë –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

async def mute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_muted
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
    is_muted = True
    await update.message.reply_text("üîï –ê–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

async def unmute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_muted
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
    is_muted = False
    await update.message.reply_text("üîî –ê–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.")

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
    try:
        chat_id = int(context.args[0])
        text = " ".join(context.args[1:])
        await context.bot.send_message(chat_id=chat_id, text=text)
        counters["broadcast_count"] += 1
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def panic_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
    try:
        chat_id = int(context.args[0])
        mins = get_minutes_left()
        phrase = random.choice(PHRASES).format(minutes=mins)
        await context.bot.send_message(chat_id=chat_id, text=phrase)
        counters["panic_count"] += 1
        await update.message.reply_text("‚úÖ –ü–∞–Ω–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def piska_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
    mins = get_minutes_left()
    phrase = "–í—Å–µ —É–∂–µ —Å–±—Ä–∏–ª–∏ —Å–µ–±–µ –ø–∏—Å—å–∫–∏? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {minutes} –¥–æ —Ç–æ–≥–æ –∫–∞–∫ –≤—Å–µ –≤—Å—Ç—Ä–µ—Ç—è—Ç—Å—è!".format(minutes=mins)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=phrase)
    counters["messages_sent"] += 1
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    options = ["–ü–æ–±—Ä–∏–ª", "–ù–µ –ø–æ–±—Ä–∏–ª"]
    await context.bot.send_poll(
        chat_id=update.effective_chat.id,
        question="–ö—Ç–æ —Å–±—Ä–∏–ª–∏ –ø–∏—Å—å–∫–∏?",
        options=options,
        is_anonymous=False
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–ê–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è: {counters['messages_sent']}\n"
        f"Broadcast: {counters['broadcast_count']}\n"
        f"Panic: {counters['panic_count']}\n"
        f"Time-–∑–∞–ø—Ä–æ—Å–æ–≤: {counters['time_requests']}\n"
        f"Muted: {'–î–∞' if is_muted else '–ù–µ—Ç'}"
    )
    await update.message.reply_text(text)

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    await query.answer()
    if data.startswith("fmt_"):
        fmt = data.split("_")[1]
        delta = get_delta()
        if fmt == "minutes":
            out = f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {int(delta.total_seconds()//60)} –º–∏–Ω—É—Ç"
        elif fmt == "hours":
            hrs = int(delta.total_seconds()//3600)
            mins = int((delta.total_seconds()%3600)//60)
            out = f"‚è≤ –û—Å—Ç–∞–ª–æ—Å—å: {hrs} —á {mins} –º–∏–Ω"
        elif fmt == "seconds":
            secs = int(delta.total_seconds())
            out = f"‚è± –û—Å—Ç–∞–ª–æ—Å—å: {secs} —Å–µ–∫—É–Ω–¥"
        elif fmt == "refresh":
            out = f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {int(delta.total_seconds()//60)} –º–∏–Ω"
        await query.edit_message_text(out, reply_markup=query.message.reply_markup)
    elif data == "next":
        await next_command(update, context)

async def countdown_loop(bot: Bot):
    global next_send_time
    while True:
        delta = get_delta()
        mins = int(delta.total_seconds()//60)
        if mins <= 0:
            await bot.send_message(chat_id=CHAT_ID, text="–ü–æ–µ–∑–¥–∫–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å! üöåüí®")
        else:
            if not is_muted:
                phrase = random.choice(PHRASES).format(minutes=mins)
                await bot.send_message(chat_id=CHAT_ID, text=phrase)
                counters["messages_sent"] += 1
                if "–ø–∏—Å—å–∫–∏" in phrase.lower():
                    options = ["–ü–æ–±—Ä–∏–ª(-–∞) üòäüëå", "–ù–µ –ø–æ–±—Ä–∏–ª(-–∞) üòçüòò"]
                    await bot.send_poll(
                        chat_id=CHAT_ID,
                        question="–ö—Ç–æ —Å–±—Ä–∏–ª —Å–≤–æ—é –ø–∏—Å—å–∫—É?",
                        options=options,
                        is_anonymous=False
                    )
		if "—Ç–∏–º–∞" in phrase.lower():
                    options = ["–í—ã—Ä–≤–µ—Ç ü§¢ü§Æ", "–ù–µ –≤—ã—Ä–≤–µ—Ç üí™üí™"]
                    await bot.send_poll(
                        chat_id=CHAT_ID,
                        question="–¢–∏–º–∞ –≤—ã—Ä–≤–µ—Ç –Ω–∞ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–∞—Ö?",
                        options=options,
                        is_anonymous=False
                    )
		if "–∑–∞—Ä–∏—Ñ–∞" in phrase.lower():
                    options = ["–í—ã—Ä–≤–µ—Ç ü§£ü§£", "–ù–µ –≤—ã—Ä–≤–µ—Ç üòíüòí"]
                    await bot.send_poll(
                        chat_id=CHAT_ID,
                        question="–ó–∞–ª–∏—Ñ–∞ –≤—ã—Ä–≤–µ—Ç –Ω–∞ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–∞—Ö?",
                        options=options,
                        is_anonymous=False
                    )
		if "—Ä–∞—Ñ–∏–≥" in phrase.lower():
                    options = ["–í—ã—Ä–≤–µ—Ç üò¢üò≠", "–ù–µ –≤—ã—Ä–≤–µ—Ç ü§©ü§ó"]
                    await bot.send_poll(
                        chat_id=CHAT_ID,
                        question="–†–∞—Ñ–∏–≥ –≤—ã—Ä–≤–µ—Ç –Ω–∞ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–∞—Ö?",
                        options=options,
                        is_anonymous=False
                    )
        next_send_time = datetime.datetime.now() + datetime.timedelta(seconds=3600)
        await asyncio.sleep(3600)

async def post_init(app):
    asyncio.create_task(countdown_loop(app.bot))

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).post_init(post_init).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("time", time_command))
    app.add_handler(CommandHandler("next", next_command))
    app.add_handler(CommandHandler("mute", mute_command))
    app.add_handler(CommandHandler("unmute", unmute_command))
    app.add_handler(CommandHandler("broadcast", broadcast_command))
    app.add_handler(CommandHandler("panic", panic_command))
    app.add_handler(CommandHandler("piska", piska_command))
    app.add_handler(CommandHandler("stats", stats_command))
    app.add_handler(CallbackQueryHandler(callback_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()