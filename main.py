import asyncio
import datetime
import random
from telegram import Update, Bot
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

BOT_TOKEN = "7619709838:AAGZrwZW-RID61ndOS8hcy5gkgFIalJVBg8"
CHAT_ID = -4907114041

TRIP_TIME = datetime.datetime(2025, 6, 8, 8, 40)

PHRASES = [
    "–ß–µ–º–æ–¥–∞–Ω—ã —Å–æ–±—Ä–∞–Ω—ã? –û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {minutes} –º–∏–Ω—É—Ç!",
    "–°–∫–æ—Ä–æ –≤—ã–ª–µ—Ç –≤ –°—É–º–≥–∞–∏—Ç! {minutes} –º–∏–Ω—É—Ç –¥–æ —Å—Ç–∞—Ä—Ç–∞. üöå",
    "–¢–∏–∫-—Ç–∞–∫... –æ—Å—Ç–∞–ª–æ—Å—å {minutes} –º–∏–Ω—É—Ç! –í—Ä–µ–º—è –ª–µ—Ç–∏—Ç!",
    "–ü—Ä–æ–≤–µ—Ä—å –Ω–æ—Å–∫–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã: {minutes} –º–∏–Ω—É—Ç –¥–æ –°—É–º–≥–∞–∏—Ç–∞!",
    "–¢—ã —É–∂–µ –ø–∞—Ö–Ω–µ—à—å –°—É–º–≥–∞–∏—Ç–æ–º... {minutes} –º–∏–Ω—É—Ç –æ—Å—Ç–∞–ª–æ—Å—å!",
    "–ï—Å–ª–∏ —Ç—ã –Ω–µ –≥–æ—Ç–æ–≤ - —ç—Ç–æ —Ç–≤–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã. {minutes} –º–∏–Ω—É—Ç!",
    "–í—Å–µ —É–∂–µ —Å–±—Ä–∏–ª–∏ —Å–µ–±–µ –ø–∏—Å—å–∫–∏? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {minutes} –¥–æ —Ç–æ–≥–æ –∫–∞–∫ –≤—Å–µ –≤—Å—Ç—Ä–µ—Ç—è—Ç—Å—è!",
    "–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ —ç—Ç–æ—Ç –≤–∞–π–±?... –≠—Ç–æ –∂–µ —Ç–æ—Ç —Å–∞–º—ã–π –≤–∞–π–± –∫–æ–≥–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å {minutes} –¥–æ –°—É–º–≥–∞–∏—Ç–∞!",
    "–ö–∞–∂–¥–∞—è –º–∏–Ω—É—Ç–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ –≤–µ–ª–∏–∫–æ–º—É –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—é. –û—Å—Ç–∞–ª–æ—Å—å {minutes}!",
]

ADMIN_ID = 1822862999

def is_admin(user_id):
    return user_id == ADMIN_ID

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    
    try:
        chat_id = int(context.args[0])
        message_text = " ".join(context.args[1:])
        await context.bot.send_message(chat_id=chat_id, text=message_text)
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

app.add_handler(CommandHandler("broadcast", broadcast_command))

async def panic_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    
    try:
        chat_id = int(context.args[0])
        minutes = get_minutes_left()
        phrase = random.choice(PHRASES).format(minutes=minutes)
        await context.bot.send_message(chat_id=chat_id, text=phrase)
        await update.message.reply_text("‚úÖ –ü–∞–Ω–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

app.add_handler(CommandHandler("panic", panic_command))


def get_minutes_left():
    now = datetime.datetime.now()
    delta = TRIP_TIME - now
    return max(0, int(delta.total_seconds() // 60))

async def time_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    minutes = get_minutes_left()
    await update.message.reply_text(f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {minutes} –º–∏–Ω—É—Ç –¥–æ –ø–æ–µ–∑–¥–∫–∏!")

async def countdown_loop(bot: Bot):
    already_announced = False
    while True:
        minutes = get_minutes_left()
        if minutes <= 0:
            if not already_announced:
                await bot.send_message(chat_id=CHAT_ID, text="–ü–æ–µ–∑–¥–∫–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å! üöåüí®")
                already_announced = True
        else:
            phrase = random.choice(PHRASES).format(minutes=minutes)
            await bot.send_message(chat_id=CHAT_ID, text=phrase)
        await asyncio.sleep(3600)

async def post_init(app):
    asyncio.create_task(countdown_loop(app.bot))

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).post_init(post_init).build()
    app.add_handler(CommandHandler("time", time_command))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()
